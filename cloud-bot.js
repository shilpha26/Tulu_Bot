const TelegramBot = require('node-telegram-bot-api');
const fetch = require('node-fetch');
const express = require('express');
const { MongoClient } = require('mongodb');

// SECURE: Only use environment variables
const token = process.env.TELEGRAM_TOKEN;
const PORT = process.env.PORT || 3000;

// Exit if token not provided
if (!token) {
    console.error('‚ùå TELEGRAM_TOKEN environment variable not set');
    process.exit(1);
}

// MongoDB connection with OPTIMIZED settings
const mongoUri = process.env.MONGODB_URI;
let client;
let db;
let mongoAvailable = false;

const bot = new TelegramBot(token, {
    polling: {
        interval: 1000,  // OPTIMIZED: Increased from 300ms to 1000ms
        autoStart: false
    }
});

console.log('üöÄ Performance-Optimized Tulu Bot Starting...\n');

// Enhanced Keep-Alive System with Wake-on-Start
let keepAliveInterval = null;
let lastActivityTime = null;
const KEEP_ALIVE_DURATION = 45 * 60 * 1000; // 45 minutes
const PING_INTERVAL = 12 * 60 * 1000; // 12 minutes

function startKeepAlive() {
    if (keepAliveInterval) {
        clearInterval(keepAliveInterval);
    }
    
    lastActivityTime = Date.now();
    console.log('üèì Starting keep-alive session for 45 minutes');
    
    keepAliveInterval = setInterval(async () => {
        const now = Date.now();
        const timeSinceActivity = now - lastActivityTime;
        
        if (timeSinceActivity > KEEP_ALIVE_DURATION) {
            clearInterval(keepAliveInterval);
            keepAliveInterval = null;
            console.log('üò¥ Keep-alive session ended - bot can sleep safely');
            return;
        }
        
        try {
            const baseUrl = process.env.RENDER_EXTERNAL_URL || `http://localhost:${PORT}`;
            const response = await fetch(`${baseUrl}/health`, {
                timeout: 5000,  // OPTIMIZED: Reduced from 10000
                headers: { 'User-Agent': 'TuluBot-KeepAlive/1.0' }
            });
            
            if (response.ok) {
                const remainingTime = Math.ceil((KEEP_ALIVE_DURATION - timeSinceActivity) / (60 * 1000));
                console.log(`üèì Keep-alive ping successful - ${remainingTime} min remaining`);
            }
        } catch (error) {
            console.log('üö® Keep-alive ping failed:', error.message);
        }
    }, PING_INTERVAL);
}

function extendKeepAlive() {
    lastActivityTime = Date.now();
    
    if (!keepAliveInterval) {
        startKeepAlive();
    } else {
        console.log('üîÑ Keep-alive session extended');
    }
}

// Wake-on-Start: Immediate response system
function wakeUpService() {
    console.log('‚ö° Service wake-up triggered');
    extendKeepAlive();
    
    setTimeout(async () => {
        try {
            const baseUrl = process.env.RENDER_EXTERNAL_URL || `http://localhost:${PORT}`;
            await fetch(`${baseUrl}/health`);
            console.log('‚úÖ Service fully responsive after wake-up');
        } catch (error) {
            console.log('‚ö†Ô∏è Wake-up health check failed:', error.message);
        }
    }, 1000);
}

// OPTIMIZED MongoDB initialization with reduced timeouts
async function initializeMongoDB() {
    if (!mongoUri) {
        console.log('‚ö†Ô∏è No MongoDB URI - using memory storage');
        return false;
    }

    try {
        console.log('üîß Connecting to MongoDB Atlas (Optimized Settings)...');
        
        client = new MongoClient(mongoUri, {
            tls: true,
            tlsAllowInvalidCertificates: false,
            serverSelectionTimeoutMS: 5000,    // OPTIMIZED: Reduced from 20000
            socketTimeoutMS: 15000,            // OPTIMIZED: Reduced from 45000
            connectTimeoutMS: 5000,            // OPTIMIZED: Reduced from 15000
            maxPoolSize: 5,                    // OPTIMIZED: Reduced from 10
            minPoolSize: 1,                    // OPTIMIZED: Reduced from 2
            retryWrites: true,
            retryReads: true,
            w: 'majority'
        });
        
        await client.connect();
        db = client.db('tulu_translator');
        
        // Test connection with retry
        let connected = false;
        for (let attempt = 1; attempt <= 3; attempt++) {
            try {
                await db.admin().ping();
                connected = true;
                break;
            } catch (pingError) {
                console.log(`‚ö†Ô∏è Connection attempt ${attempt}/3 failed`);
                if (attempt < 3) await new Promise(resolve => setTimeout(resolve, 1000)); // OPTIMIZED: Reduced from 2000
            }
        }
        
        if (!connected) throw new Error('Failed to establish stable connection');
        
        console.log('‚úÖ Connected to MongoDB Atlas - Enhanced Database Active');
        
        // Create separate collections with comprehensive indexes
        try {
            // Taught Dictionary Collection (User-contributed authentic Tulu)
            await db.collection('taught_dictionary').createIndex({ english: 1 }, { unique: true });
            await db.collection('taught_dictionary').createIndex({ updatedAt: -1 });
            await db.collection('taught_dictionary').createIndex({ contributor: 1 });
            await db.collection('taught_dictionary').createIndex({ usage_count: -1 });
            
            // API Cache Collection (API results for performance)
            await db.collection('api_cache').createIndex({ english: 1 }, { unique: true });
            await db.collection('api_cache').createIndex({ createdAt: 1 }, { expireAfterSeconds: 7 * 24 * 60 * 60 }); // 7 days TTL
            await db.collection('api_cache').createIndex({ api_source: 1 });
            
            console.log('‚úÖ Enhanced collections created with comprehensive indexes');
        } catch (indexError) {
            if (indexError.code !== 85) {
                console.log('‚ö†Ô∏è Index creation warning:', indexError.message);
            }
        }
        
        const taughtCount = await db.collection('taught_dictionary').countDocuments();
        const cacheCount = await db.collection('api_cache').countDocuments();
        
        console.log(`üìö Taught Dictionary: ${taughtCount} user-contributed words`);
        console.log(`üåê API Cache: ${cacheCount} cached translations`);
        
        return true;
    } catch (error) {
        console.error('‚ùå MongoDB connection failed:', error.message);
        console.log('‚ö†Ô∏è Continuing with memory storage + API fallback');
        return false;
    }
}

// YOUR WORKING API METHOD - Corrected to use authentic Tulu (tcy)
async function tryAPITranslation(text) {
    // Skip API for very short words or numbers (already in base dictionary)
    if (text.length <= 2 || /^\d+$/.test(text)) return null;
    
    console.log(`üîç Trying Google Translate with authentic Tulu code (tcy) for: "${text}"`);
    
    // YOUR WORKING API URL with Tulu language code
    const url = `https://translate.googleapis.com/translate_a/single?client=gtx&sl=en&tl=tcy&dt=t&q=${encodeURIComponent(text)}`;
    
    try {
        // Your working delay for better reliability
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        const response = await fetch(url, {
            headers: { 
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36' 
            },
            timeout: 8000  // Reasonable timeout
        });
        
        if (response.ok) {
            const result = await response.json();
            if (result && result[0] && result[0][0] && result[0][0][0]) {
                const translation = result[0][0][0].trim();
                
                // Your working validation logic
                if (translation.length > 2 && 
                    translation !== text.toLowerCase() && 
                    !translation.includes('undefined') &&
                    !translation.includes('INVALID') &&
                    !translation.includes('ERROR')) {
                    
                    console.log(`‚úÖ Tulu API success: "${translation}"`);
                    return { translation, source: 'Google Translate (Tulu tcy)' };
                }
            }
        }
    } catch (error) {
        console.log(`üö´ Tulu API error: ${error.message}`);
    }
    
    // This is the KEY - when API fails, we ask for user input for authentic Tulu
    console.log(`üéØ No Tulu API result for "${text}" - will request authentic user contribution`);
    return null;
}

// OPTIMIZED cache system for taught dictionary
let taughtWordsCache = {};
let lastCacheUpdate = 0;
const CACHE_DURATION = 5 * 60 * 1000; // 5 minutes

async function getCachedTaughtWords() {
    const now = Date.now();
    if (now - lastCacheUpdate > CACHE_DURATION || Object.keys(taughtWordsCache).length === 0) {
        taughtWordsCache = await loadFromTaughtDictionary();
        lastCacheUpdate = now;
        console.log(`üìö Taught dictionary cache refreshed: ${Object.keys(taughtWordsCache).length} words`);
    }
    return taughtWordsCache;
}

// Save to Taught Dictionary (User contributions)
async function saveToTaughtDictionary(englishWord, tuluWord, userInfo = null) {
    if (!mongoAvailable || !db) {
        console.log(`üíæ Memory save: "${englishWord}" = "${tuluWord}"`);
        taughtWordsCache[englishWord.toLowerCase().trim()] = tuluWord.trim(); // Update local cache
        return true;
    }

    try {
        const doc = {
            english: englishWord.toLowerCase().trim(),
            tulu: tuluWord.trim(),
            contributor: userInfo || 'Anonymous',
            createdAt: new Date(),
            updatedAt: new Date(),
            verified: false,
            source: 'user_taught',
            votes: 0,
            usage_count: 1
        };
        
        // Check if word exists to preserve metadata
        const existing = await db.collection('taught_dictionary').findOne({ english: doc.english });
        if (existing) {
            doc.createdAt = existing.createdAt;
            doc.usage_count = (existing.usage_count || 0) + 1;
            doc.votes = existing.votes || 0;
        }
        
        await db.collection('taught_dictionary').replaceOne(
            { english: doc.english },
            doc,
            { upsert: true }
        );
        
        // Update local cache immediately
        taughtWordsCache[doc.english] = doc.tulu;
        
        console.log(`üìö Taught Dictionary: "${englishWord}" = "${tuluWord}" by ${userInfo || 'Anonymous'}`);
        return true;
    } catch (error) {
        console.error('‚ùå Taught Dictionary save failed:', error.message);
        return false;
    }
}

// Save API result to cache
async function saveToAPICache(englishWord, translation, apiSource) {
    if (!mongoAvailable || !db) return;

    try {
        const doc = {
            english: englishWord.toLowerCase().trim(),
            translation: translation.trim(),
            api_source: apiSource,
            createdAt: new Date(),
            source: 'api_cache'
        };
        
        await db.collection('api_cache').replaceOne(
            { english: doc.english },
            doc,
            { upsert: true }
        );
        
        console.log(`üåê API Cache: "${englishWord}" = "${translation}" (${apiSource})`);
    } catch (error) {
        console.error('‚ùå API Cache save failed:', error.message);
    }
}

// Load from Taught Dictionary
async function loadFromTaughtDictionary() {
    if (!mongoAvailable || !db) return {};

    try {
        const words = {};
        const cursor = db.collection('taught_dictionary').find({});
        
        await cursor.forEach(doc => {
            words[doc.english] = doc.tulu;
        });
        
        console.log(`üìñ Loaded ${Object.keys(words).length} user-taught words`);
        return words;
    } catch (error) {
        console.error('‚ùå Taught Dictionary load failed:', error.message);
        return {};
    }
}

// Load from API Cache
async function loadFromAPICache(englishWord) {
    if (!mongoAvailable || !db) return null;

    try {
        const cached = await db.collection('api_cache').findOne({ 
            english: englishWord.toLowerCase().trim() 
        });
        
        if (cached) {
            console.log(`üåê Cache hit: "${englishWord}" = "${cached.translation}"`);
            return { translation: cached.translation, source: cached.api_source };
        }
        return null;
    } catch (error) {
        console.error('‚ùå API Cache load failed:', error.message);
        return null;
    }
}

// Get comprehensive statistics
async function getTaughtDictionaryStats() {
    if (!mongoAvailable || !db) return { count: Object.keys(taughtWordsCache).length, recent: [] };

    try {
        const count = await db.collection('taught_dictionary').countDocuments();
        
        const recentCursor = db.collection('taught_dictionary')
            .find({})
            .sort({ updatedAt: -1 })
            .limit(5);
        
        const recent = [];
        await recentCursor.forEach(doc => {
            recent.push({ 
                english: doc.english, 
                tulu: doc.tulu,
                contributor: doc.contributor || 'Anonymous',
                updatedAt: doc.updatedAt,
                usage_count: doc.usage_count || 1
            });
        });
        
        return { count, recent };
    } catch (error) {
        return { count: 0, recent: [] };
    }
}

async function getAPICacheStats() {
    if (!mongoAvailable || !db) return { count: 0 };

    try {
        const count = await db.collection('api_cache').countDocuments();
        return { count };
    } catch (error) {
        return { count: 0 };
    }
}

// Enhanced health check server
const app = express();

app.get('/', async (req, res) => {
    const isKeepAliveActive = keepAliveInterval !== null;
    const timeSinceActivity = lastActivityTime ? Date.now() - lastActivityTime : null;
    let taughtStats = { count: 0, recent: [] };
    let cacheStats = { count: 0 };
    
    try {
        taughtStats = await getTaughtDictionaryStats();
        cacheStats = await getAPICacheStats();
    } catch (error) {
        // Handle gracefully
    }
    
    const stats = {
        status: 'running',
        bot: 'Authentic Tulu Translator with Performance Optimizations',
        version: '5.2.0', // Updated version
        uptime: Math.floor(process.uptime() / 60) + ' minutes',
        database_structure: {
            taught_dictionary: taughtStats.count,
            api_cache: cacheStats.count,
            base_dictionary: Object.keys(tuluDictionary).length
        },
        total_vocabulary: Object.keys(tuluDictionary).length + taughtStats.count,
        recent_contributions: taughtStats.recent,
        keep_alive_active: isKeepAliveActive,
        minutes_since_activity: timeSinceActivity ? Math.floor(timeSinceActivity / (60 * 1000)) : null,
        database: {
            type: mongoAvailable ? 'MongoDB Atlas - Optimized Settings' : 'Memory Storage + API',
            status: mongoAvailable ? 'Connected' : 'Fallback Mode',
            collections: mongoAvailable ? ['taught_dictionary', 'api_cache'] : ['memory'],
            persistent: mongoAvailable,
            shared_across_users: mongoAvailable
        },
        api_strategy: 'Google Translate (tcy) ‚Üí User Teaching for Authentic Tulu',
        optimizations: [
            'Reduced MongoDB Timeouts (5-15s)',
            'Smart Taught Dictionary Caching (5min)',
            'Optimized Polling (1000ms)',
            'Authentic Tulu API (tcy language code)',
            'User-Contribution Priority System'
        ],
        translation_priority: [
            '1. Base Dictionary (Verified Tulu)',
            '2. Cached Taught Dictionary (5min TTL)',
            '3. API Cache (Performance)',
            '4. Google Translate (tcy) ‚Üí If no result, ask user',
            '5. User Teaching ‚Üí Builds authentic database'
        ],
        timestamp: new Date().toISOString()
    };
    res.json(stats);
});

app.get('/health', (req, res) => {
    res.json({ 
        status: 'healthy', 
        keep_alive: keepAliveInterval !== null,
        database: mongoAvailable ? 'Optimized MongoDB Collections Connected' : 'Memory + API Active',
        api_approach: 'Authentic Tulu (tcy) ‚Üí User Teaching',
        performance_optimized: true,
        timestamp: new Date().toISOString() 
    });
});

// In-memory cache and user states
let learnedWords = {};
const userStates = {};

// Comprehensive base dictionary with Roman Tulu
const tuluDictionary = {
    // Greetings
    'hello': 'namaskara', 'hi': 'namaskara', 'hey': 'namaskara',
    'good morning': 'udige namaskara', 'good evening': 'sanje namaskara',
    'good night': 'ratre namaskara', 'goodbye': 'barpe', 'bye': 'barpe',
    
    // Basic responses
    'yes': 'aye', 'no': 'illa', 'ok': 'sari', 'okay': 'sari',
    'thank you': 'dhanyavada', 'thanks': 'dhanyavada',
    'welcome': 'swagata', 'sorry': 'kshame', 'please': 'dayavu',
    
    // Numbers (Roman Tulu)
    'zero': 'pundu', 'one': 'onji', 'two': 'raddu', 'three': 'muji', 'four': 'nalku',
    'five': 'aidu', 'six': 'aaru', 'seven': 'elu', 'eight': 'enmu', 'nine': 'ombodu', 'ten': 'pattu',
    'eleven': 'pannondu', 'twelve': 'panniraddu', 'thirteen': 'paddmuji', 'fourteen': 'paddnalku', 'fifteen': 'paddaidu',
    'sixteen': 'paddarru', 'seventeen': 'paddelu', 'eighteen': 'paddenmu', 'nineteen': 'paddombodu', 'twenty': 'ippattu',
    
    // Written numbers
    '0': 'pundu', '1': 'onji', '2': 'raddu', '3': 'muji', '4': 'nalku',
    '5': 'aidu', '6': 'aaru', '7': 'elu', '8': 'enmu', '9': 'ombodu', '10': 'pattu',
    '11': 'pannondu', '12': 'panniraddu', '13': 'paddmuji', '14': 'paddnalku', '15': 'paddaidu',
    '16': 'paddarru', '17': 'paddelu', '18': 'paddenmu', '19': 'paddombodu', '20': 'ippattu',
    
    // Larger numbers
    'thirty': 'muppattu', 'forty': 'nalpattu', 'fifty': 'aivattu',
    'sixty': 'aruvattu', 'seventy': 'eppattu', 'eighty': 'enpattu', 'ninety': 'tombattu',
    'hundred': 'nuru', 'thousand': 'saayira', 'lakh': 'laksha',
    '30': 'muppattu', '40': 'nalpattu', '50': 'aivattu', '60': 'aruvattu',
    '70': 'eppattu', '80': 'enpattu', '90': 'tombattu', '100': 'nuru', '1000': 'saayira',
    
    // Family & Relationships
    'mother': 'amma', 'father': 'appa', 'brother': 'anna', 'sister': 'akka',
    'grandfather': 'ajja', 'grandmother': 'ajji', 'uncle': 'mama', 'aunt': 'mami',
    'son': 'maga', 'daughter': 'magal', 'husband': 'ganda', 'wife': 'hendati',
    
    // Common words
    'water': 'jalu', 'house': 'mane', 'home': 'mane', 'come': 'bale', 'go': 'pole',
    'good': 'chennu', 'bad': 'kettadu', 'big': 'dodd', 'small': 'kuchi',
    'hot': 'bekku', 'cold': 'thandu', 'food': 'oota', 'eat': 'tinu', 'drink': 'kuDi',
    
    // Actions
    'sit': 'kur', 'stand': 'nille', 'sleep': 'malpe', 'wake up': 'yetar',
    'walk': 'naDe', 'run': 'oDu', 'stop': 'nille', 'wait': 'tingla',
    'give': 'korle', 'take': 'teele', 'see': 'kan', 'listen': 'kel',
    'speak': 'mal', 'read': 'odu', 'write': 'baraye',
    
    // Common questions
    'how are you': 'yenkulu ullar', 'what is your name': 'ninna hesaru yenu',
    'where are you': 'yer yele ullar', 'what are you doing': 'yenu maduttullar',
    'did you eat': 'oota aayitha', 'how old are you': 'ninna vayasu yethra',
    
    // Colors
    'red': 'kempu', 'green': 'pacche', 'blue': 'neeli', 'yellow': 'arishina',
    'white': 'bolpu', 'black': 'karpu',
    
    // Time
    'today': 'inji', 'yesterday': 'ninale', 'tomorrow': 'naalke',
    'morning': 'udike', 'evening': 'sanje', 'night': 'ratre', 'time': 'velu',
    
    // Places
    'school': 'shale', 'hospital': 'aspatre', 'temple': 'deve', 'market': 'pete',
    
    // Emotions
    'happy': 'santoshi', 'sad': 'dukhi', 'angry': 'kopa', 'love': 'priti'
};

function getCombinedDictionary() {
    return { ...tuluDictionary, ...learnedWords };
}

// CORRECTED 4-tier translation system: Base ‚Üí Taught ‚Üí API Cache ‚Üí Tulu API (tcy) ‚Üí User Teaching
async function translateToTulu(text, userId) {
    const lowerText = text.toLowerCase().trim();
    
    // Tier 1: Base dictionary (highest priority - verified Tulu)
    if (tuluDictionary[lowerText]) {
        const translation = tuluDictionary[lowerText];
        console.log(`‚úÖ Base dictionary: "${translation}"`);
        return { translation, found: true, source: 'Verified Base Dictionary', tier: 1 };
    }
    
    // Tier 2: Taught Dictionary with caching (second priority - user-taught authentic Tulu)
    const taughtWords = await getCachedTaughtWords(); // OPTIMIZED: Use cached version
    if (taughtWords[lowerText]) {
        const translation = taughtWords[lowerText];
        console.log(`‚úÖ Taught dictionary (cached): "${translation}"`);
        return { translation, found: true, source: 'User-Taught Dictionary (Cached)', tier: 2 };
    }
    
    // Tier 3: API Cache (check if we already translated this)
    const cachedResult = await loadFromAPICache(lowerText);
    if (cachedResult) {
        console.log(`‚úÖ API cache hit: "${cachedResult.translation}"`);
        return { 
            translation: cachedResult.translation, 
            found: true, 
            source: `${cachedResult.source} (Cached)`, 
            tier: 3,
            needsVerification: true 
        };
    }
    
    // Tier 4: Fresh Tulu API translation (YOUR WORKING METHOD)
    console.log(`üîç Trying Google Translate Tulu API for: "${text}"`);
    const apiResult = await tryAPITranslation(text);
    if (apiResult) {
        // Save to cache for future use
        await saveToAPICache(lowerText, apiResult.translation, apiResult.source);
        
        console.log(`üåê Fresh Tulu API translation: "${apiResult.translation}"`);
        return {
            translation: apiResult.translation,
            found: true,
            source: `${apiResult.source} (Fresh)`,
            tier: 4,
            needsVerification: true
        };
    }
    
    // Tier 5: Ask user to teach AUTHENTIC TULU (this is the key!)
    console.log(`üéØ No Tulu translation found anywhere for: "${text}" - requesting authentic user contribution`);
    userStates[userId] = {
        mode: 'learning',
        englishWord: lowerText,
        originalText: text,
        timestamp: Date.now()
    };
    
    return { translation: null, found: false, source: 'needs_authentic_teaching', tier: 5 };
}

// Enhanced learning function for taught dictionary
async function learnNewWord(englishWord, tuluTranslation, userId, userInfo = null) {
    const lowerEnglish = englishWord.toLowerCase().trim();
    const tuluWord = tuluTranslation.trim();
    
    // Validate input
    if (tuluWord.length < 2) {
        console.log(`‚ùå Invalid translation too short: "${tuluWord}"`);
        return false;
    }
    
    // Save to taught dictionary
    const saved = await saveToTaughtDictionary(lowerEnglish, tuluWord, userInfo);
    
    if (saved) {
        // Update local cache
        learnedWords[lowerEnglish] = tuluWord;
        delete userStates[userId];
        
        console.log(`üìö User taught authentic Tulu: "${lowerEnglish}" = "${tuluWord}"`);
        return true;
    }
    
    return false;
}

function clearUserState(userId) {
    if (userStates[userId]) {
        delete userStates[userId];
        return true;
    }
    return false;
}

// Enhanced bot startup with conflict prevention
let botStarted = false;

async function startBotSafely() {
    if (botStarted) {
        console.log('‚ö†Ô∏è Bot already started - preventing duplicate instance');
        return;
    }
    
    try {
        console.log('ü§ñ Starting bot with conflict prevention...');
        
        // Clear any existing webhooks that might conflict
        await bot.deleteWebHook();
        console.log('üßπ Cleared any existing webhooks');
        
        // Start polling with delay to avoid conflicts
        await new Promise(resolve => setTimeout(resolve, 2000));
        await bot.startPolling();
        
        botStarted = true;
        console.log('‚úÖ Bot polling started successfully (Optimized: 1000ms interval)');
        
        // Test bot connection
        const botInfo = await bot.getMe();
        console.log(`ü§ñ Bot confirmed: @${botInfo.username}`);
        
    } catch (error) {
        console.error('‚ùå Bot startup failed:', error.message);
        
        if (error.message.includes('409') || error.message.includes('Conflict')) {
            console.log('üîÑ Conflict detected - retrying in 10 seconds...');
            setTimeout(() => {
                botStarted = false;
                startBotSafely();
            }, 10000);
        } else {
            throw error;
        }
    }
}

// Enhanced bot commands

// Wake-on-Start /start command
bot.onText(/\/start/, async (msg) => {
    wakeUpService();
    
    const taughtStats = await getTaughtDictionaryStats();
    const cacheStats = await getAPICacheStats();
    const totalWords = Object.keys(tuluDictionary).length + taughtStats.count;
    
    clearUserState(msg.from.id);
    
    const welcomeMessage = `üåü **Authentic Tulu Translator Bot v5.2**

‚ö° **Performance + Authenticity Optimized!**
üöÄ **Instant Wake-Up** - No delays!
üèõÔ∏è **Authentic Tulu Focus** - Real Tulu, not substitutes
üåê **Smart API Strategy** - Google Translate (tcy) ‚Üí User Teaching

üìä **Live Database Statistics:**
‚Ä¢ **üèÜ Base Dictionary:** ${Object.keys(tuluDictionary).length} verified words
‚Ä¢ **üìö Taught Dictionary:** ${taughtStats.count} authentic user contributions  
‚Ä¢ **üåê API Cache:** ${cacheStats.count} cached translations
‚Ä¢ **üéØ Total Vocabulary:** ${totalWords}+ words

üéØ **Authentic Translation Strategy:**
1Ô∏è‚É£ **Base Dictionary** ‚Üí Instant verified Tulu
2Ô∏è‚É£ **Cached User-Taught** ‚Üí Authentic contributions (5min cache)
3Ô∏è‚É£ **API Cache** ‚Üí Previously successful results
4Ô∏è‚É£ **Google Translate (tcy)** ‚Üí Attempts authentic Tulu
5Ô∏è‚É£ **üîë KEY: When API fails ‚Üí YOU teach authentic Tulu!**

üí° **Why This Works:**
‚Ä¢ APIs don't have good Tulu support
‚Ä¢ When API fails, YOU provide the authentic word
‚Ä¢ Everyone learns from your authentic contributions
‚Ä¢ Builds genuine Tulu database, not Hindi/Kannada substitutes

üí° **Commands:**
‚Ä¢ Just type any English word or phrase
‚Ä¢ **/correct <word>** - Fix taught dictionary entries
‚Ä¢ **/stats** - Performance and authenticity metrics
‚Ä¢ **/learned** - Browse authentic user contributions

üéØ **Try These:**
‚Ä¢ "Hello" ‚Üí [translate:namaskara] (Base: <1ms)
‚Ä¢ "Thank you" ‚Üí [translate:dhanyavada] (Base: <1ms)  
‚Ä¢ "I love you" ‚Üí (API will likely fail ‚Üí teach authentic Tulu!)

üèõÔ∏è **Building the world's most authentic Tulu database with optimal performance!**`;

    await bot.sendMessage(msg.chat.id, welcomeMessage, {parse_mode: 'Markdown'});
});

// Enhanced /stats command with performance metrics
bot.onText(/\/stats/, async (msg) => {
    extendKeepAlive();
    
    const taughtStats = await getTaughtDictionaryStats();
    const cacheStats = await getAPICacheStats();
    const uptime = Math.floor(process.uptime() / 60);
    const hours = Math.floor(uptime / 60);
    const minutes = uptime % 60;
    const isKeepAliveActive = keepAliveInterval !== null;
    
    const recentList = taughtStats.recent.length > 0 
        ? taughtStats.recent.map(w => 
            `‚Ä¢ "${w.english}" ‚Üí "${w.tulu}"\n  üë§ ${w.contributor} ‚Ä¢ üîÑ ${w.usage_count} uses`
          ).join('\n\n')
        : 'No user contributions yet - be the first!';
    
    const statsMessage = `üìä **Performance-Optimized Statistics**

‚ö° **Service Status:**
‚Ä¢ **Uptime:** ${hours}h ${minutes}m
‚Ä¢ **Keep-Alive:** ${isKeepAliveActive ? 'Active (45min)' : 'Sleeping'}
‚Ä¢ **Database:** ${mongoAvailable ? 'MongoDB Atlas (Optimized)' : 'Memory + API'}

üóÑÔ∏è **Database Collections:**
‚Ä¢ **üèÜ Base Dictionary:** ${Object.keys(tuluDictionary).length} verified Tulu words
‚Ä¢ **üìö Taught Dictionary:** ${taughtStats.count} user contributions
‚Ä¢ **üåê API Cache:** ${cacheStats.count} cached translations
‚Ä¢ **üìä Total Vocabulary:** ${Object.keys(tuluDictionary).length + taughtStats.count}+ words

üìà **Recent User Contributions:**
${recentList}

üéØ **Translation Performance:**
‚Ä¢ **Tier 1 (Base):** <1ms, 100% verified Tulu
‚Ä¢ **Tier 2 (Taught):** <5ms, user-verified authentic  
‚Ä¢ **Tier 3 (Cache):** <50ms, previously translated
‚Ä¢ **Tier 4 (Tulu API):** 2-3s, authentic Tulu attempt
‚Ä¢ **Tier 5 (Teaching):** Community builds database

üöÄ **Building authentic Tulu - ${1000 - (Object.keys(tuluDictionary).length + taughtStats.count)} words to reach 1000!**`;

    await bot.sendMessage(msg.chat.id, statsMessage, {parse_mode: 'Markdown'});
});

// Enhanced /learned command for taught dictionary
bot.onText(/\/learned/, async (msg) => {
    extendKeepAlive();
    
    const taughtStats = await getTaughtDictionaryStats();
    
    if (taughtStats.count === 0) {
        await bot.sendMessage(msg.chat.id, `üìù **Taught Dictionary Empty**

üéØ **Be the first contributor!**

**How it works:**
1Ô∏è‚É£ Ask me any English word/phrase
2Ô∏è‚É£ If not found, I ask you to teach authentic Tulu
3Ô∏è‚É£ Your word goes to taught_dictionary collection

**Benefits:**
${mongoAvailable ? '‚úÖ **Permanent storage** - Never lost' : '‚úÖ **Session storage** - Fast access'}
‚úÖ **Higher priority** - Your words beat API results
‚úÖ **Community building** - Preserve authentic Tulu

**Start contributing now!**`, {parse_mode: 'Markdown'});
        return;
    }
    
    const recentList = taughtStats.recent
        .map(w => `‚Ä¢ "${w.english}" ‚Üí "${w.tulu}"\n  üë§ Contributor: ${w.contributor}\n  üìÖ Added: ${w.updatedAt.toLocaleDateString()}\n  üîÑ Used: ${w.usage_count} times`)
        .join('\n\n');
    
    const message = `üìö **Taught Dictionary Collection**

üóÑÔ∏è **Total User Contributions:** ${taughtStats.count} words
${mongoAvailable ? 'üåç **Shared globally** with all users' : 'üí≠ **Available in current session**'}

**Recent Authentic Contributions:**
${recentList}

${taughtStats.count > 5 ? `\n*üìä ...and ${taughtStats.count - 5} more words in collection*\n` : ''}

üéØ **Your Impact:**
${mongoAvailable ? '‚úÖ **Permanent cloud storage** - Helps everyone' : '‚úÖ **Session storage** - Fast access'}
‚úÖ **Higher priority** - Always beats API translations
‚úÖ **Community resource** - Preserves authentic Tulu

üîß **Commands:**
‚Ä¢ **/correct <word>** - Update existing entries
‚Ä¢ Ask new words - Add to collection
‚Ä¢ **/stats** - See full analytics

üåç **Building authentic Tulu database together!**`;
    
    await bot.sendMessage(msg.chat.id, message, {parse_mode: 'Markdown'});
});

// Enhanced /correct command for taught dictionary
bot.onText(/\/correct (.+)/, async (msg, match) => {
    extendKeepAlive();
    
    const userId = msg.from.id;
    const userName = msg.from.first_name || 'User';
    const wordToCorrect = match[1].toLowerCase().trim();
    
    // Check taught dictionary
    const taughtWords = await getCachedTaughtWords();
    const fullDictionary = { ...tuluDictionary, ...taughtWords };
    
    if (fullDictionary[wordToCorrect]) {
        const currentTranslation = fullDictionary[wordToCorrect];
        
        // Check if it's from base dictionary
        if (tuluDictionary[wordToCorrect]) {
            await bot.sendMessage(msg.chat.id, `‚ùå **Cannot Correct Base Dictionary**

üìù **Word:** "${wordToCorrect}"
üîí **Current:** "${currentTranslation}"
üìö **Source:** Built-in verified dictionary

**Why can't I correct this?**
Base dictionary words are verified Tulu. However, you can:

1Ô∏è‚É£ **Add variation:** Ask me "${wordToCorrect} alternative" 
2Ô∏è‚É£ **Teach regional version:** Use slightly different phrasing
3Ô∏è‚É£ **Contribute new words:** Help expand taught dictionary

üí° **Focus on teaching new authentic Tulu words!**`, {parse_mode: 'Markdown'});
            return;
        }
        
        // Set up correction mode for taught dictionary words
        userStates[userId] = {
            mode: 'correcting',
            englishWord: wordToCorrect,
            originalText: wordToCorrect,
            oldTranslation: currentTranslation,
            correctorName: userName,
            timestamp: Date.now()
        };
        
        await bot.sendMessage(msg.chat.id, `üîß **Correction Mode**

üìù **English:** "${wordToCorrect}"
üîÑ **Current Translation:** "${currentTranslation}"
üóÑÔ∏è **Source:** User-taught dictionary

‚úèÔ∏è **Send the correct Tulu translation:**

**What happens:**
‚Ä¢ Updates taught_dictionary collection
‚Ä¢ Your correction gets attribution
‚Ä¢ All users see improved translation

**Commands:**
‚Ä¢ **/skip** - Cancel correction
‚Ä¢ Type correct translation to proceed

‚è∞ **Expires in 10 minutes**`, {parse_mode: 'Markdown'});
        
        // Auto-expire correction
        setTimeout(() => {
            if (userStates[userId] && userStates[userId].mode === 'correcting' && 
                userStates[userId].englishWord === wordToCorrect) {
                delete userStates[userId];
                bot.sendMessage(msg.chat.id, `‚è∞ **Correction expired for "${wordToCorrect}"**

You can start a new correction anytime:
**/correct ${wordToCorrect}**`).catch(() => {});
            }
        }, 10 * 60 * 1000);
        
    } else {
        await bot.sendMessage(msg.chat.id, `‚ùå **Word Not Found**

üìù **"${wordToCorrect}"** is not in any collection yet.

üéØ **What you can do:**
1Ô∏è‚É£ **Add it first:** Ask me "${wordToCorrect}" and teach the translation
2Ô∏è‚É£ **Check spelling:** Verify the English word is correct
3Ô∏è‚É£ **Browse words:** Use **/learned** to see taught dictionary

üí° **Once you teach "${wordToCorrect}", you can use /correct to improve it.**`, {parse_mode: 'Markdown'});
    }
});

// Skip/cancel command
bot.onText(/\/skip|\/cancel/, (msg) => {
    extendKeepAlive();
    
    const userId = msg.from.id;
    const cleared = clearUserState(userId);
    
    if (cleared) {
        bot.sendMessage(msg.chat.id, `‚úÖ **Operation Cancelled**

üîÑ **Ready for new translations!**
‚Ä¢ Ask me any English word or phrase
‚Ä¢ Use **/correct <word>** to fix taught dictionary
‚Ä¢ Use **/stats** for performance metrics

üóÑÔ∏è **Collections ready** for your contributions`);
    } else {
        bot.sendMessage(msg.chat.id, `üí≠ **No active operation**

üéØ **Try these features:**
‚Ä¢ Type any English word for translation
‚Ä¢ **/stats** - Performance and database statistics  
‚Ä¢ **/learned** - Browse taught dictionary
‚Ä¢ **/numbers** - Complete number reference

‚ö° **All optimized for maximum performance!**`);
    }
});

// Numbers reference
bot.onText(/\/numbers/, (msg) => {
    extendKeepAlive();
    
    const numbersMessage = `üî¢ **Complete Tulu Numbers (Roman)**

**Basic (0-10):**
0‚Üípundu, 1‚Üíonji, 2‚Üíraddu, 3‚Üímuji, 4‚Üínalku, 5‚Üíaidu  
6‚Üíaaru, 7‚Üíelu, 8‚Üíenmu, 9‚Üíombodu, 10‚Üípattu

**Teens (11-20):**
11‚Üípannondu, 12‚Üípanniraddu, 13‚Üípaddmuji, 14‚Üípaddnalku, 15‚Üípaddaidu  
16‚Üípaddarru, 17‚Üípaddelu, 18‚Üípaddenmu, 19‚Üípaddombodu, 20‚Üíippattu

**Larger Numbers:**
30‚Üímuppattu, 40‚Üínalpattu, 50‚Üíaivattu, 60‚Üíaruvattu, 70‚Üíeppattu  
80‚Üíenpattu, 90‚Üítombattu, 100‚Üínuru, 1000‚Üísaayira

**Try it:**
‚Ä¢ Type "5" ‚Üí aidu
‚Ä¢ Type "fifteen" ‚Üí paddaidu  
‚Ä¢ Type "hundred" ‚Üí nuru

‚úÖ All numbers in base dictionary - <1ms instant translation!
üìö Part of ${Object.keys(tuluDictionary).length} verified base words`;

    bot.sendMessage(msg.chat.id, numbersMessage, {parse_mode: 'Markdown'});
});

// Enhanced main message handler with corrected strategy
bot.on('message', async (msg) => {
    if (msg.text && !msg.text.startsWith('/')) {
        const userText = msg.text.trim();
        const userId = msg.from.id;
        const userName = msg.from.first_name || 'User';
        
        extendKeepAlive();
        console.log(`üì© ${userName}: "${userText}"`);
        
        // Use cached taught dictionary for better performance
        if (mongoAvailable) {
            learnedWords = await getCachedTaughtWords();
        }
        
        // Handle learning mode (user teaching authentic Tulu)
        if (userStates[userId]) {
            const userState = userStates[userId];
            
            if (userState.mode === 'learning') {
                // User is teaching authentic Tulu to taught_dictionary
                const userInfo = `${userName} (${userId})`;
                const success = await learnNewWord(userState.englishWord, userText, userId, userInfo);
                
                if (success) {
                    const storageType = mongoAvailable ? 'taught_dictionary collection with 5-min cache' : 'session memory';
                    const impact = mongoAvailable ? 'Available to ALL users globally with optimized performance!' : 'Available in current session';
                    
                    const successMessage = `‚úÖ **Authentic Tulu Added Successfully!**

üìù **English:** ${userState.originalText}  
üèõÔ∏è **Authentic Tulu:** ${userText}
üë§ **Contributor:** ${userName} (attributed)
üóÑÔ∏è **Stored in:** MongoDB ${storageType}

**This is exactly how we build authentic Tulu database!**
‚Ä¢ API didn't have "${userState.originalText}"
‚Ä¢ You provided the authentic Tulu word
‚Ä¢ Now everyone benefits from your knowledge

**Test it:** Ask me "${userState.originalText}" again for <5ms response!
**Share it:** Tell others to try "${userState.originalText}"

üôè **Thank you for preserving authentic Tulu with optimal performance!**`;

                    await bot.sendMessage(msg.chat.id, successMessage, {parse_mode: 'Markdown'});
                } else {
                    await bot.sendMessage(msg.chat.id, `‚ùå **Could not save authentic Tulu**

Please try again: Ask me "${userState.originalText}" and provide the authentic Tulu translation.

üí° **Tips for authentic contributions:**
‚Ä¢ Use Roman letters (English alphabet)
‚Ä¢ Provide the most authentic/common Tulu version
‚Ä¢ Double-check spelling before submitting

‚ö° **Performance benefit:** Your word will be cached for 5 minutes for instant access!`);
                    delete userStates[userId];
                }
                return;
            }
        }
        
        // Normal translation request with enhanced authentic strategy
        const englishPattern = /^[a-zA-Z0-9\s.,!?'"-]+$/;
        
        if (englishPattern.test(userText)) {
            bot.sendChatAction(msg.chat.id, 'typing');
            
            const result = await translateToTulu(userText, userId);
            
            if (result.found) {
                const tierEmoji = {
                    1: 'üèÜ', // Base dictionary
                    2: 'üéØ', // Taught dictionary 
                    3: 'üíæ', // API cache
                    4: 'üåê', // Fresh Tulu API
                    5: '‚ùì'  // Unknown
                }[result.tier] || '‚úÖ';
                
                const priority = {
                    1: 'Highest (<1ms)', 
                    2: 'High (<5ms Cached)', 
                    3: 'Good (<50ms)',
                    4: 'Medium (Tulu API)', 
                    5: 'Learning'
                }[result.tier] || 'Standard';
                
                let responseMessage = `${tierEmoji} **Authentic Tulu Translation Found**

üìù **English:** ${userText}
üèõÔ∏è **Translation:** ${result.translation}

üìä **Source:** ${result.source}

üåê **Google Translate Tulu API Result:**
‚Ä¢ **Improve it:** **/correct ${userText.toLowerCase()}**
‚Ä¢ Your correction provides authentic Tulu for everyone`;
                } else if (result.tier === 3) {
                    responseMessage += `

üíæ **Previously Cached API Result:**
‚Ä¢ From earlier Google Translate (tcy) attempt
‚Ä¢ **Improve it:** **/correct ${userText.toLowerCase()}** with authentic Tulu`;
                } else if (result.tier === 2) {
                    responseMessage += `

üéØ **Authentic User-Taught Translation:**
‚Ä¢ Retrieved from 5-minute smart cache
‚Ä¢ Contributed by community member
‚Ä¢ Authentic and verified by native speaker
‚Ä¢ **Improve it:** **/correct ${userText.toLowerCase()}** if needed`;
                } else {
                    responseMessage += `

üí° **Perfect!** Use **/correct ${userText.toLowerCase()}** to add community improvements`;
                }

                responseMessage += `

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìä **/stats** ‚Ä¢ üî¢ **/numbers** ‚Ä¢ üìö **/learned**`;

                await bot.sendMessage(msg.chat.id, responseMessage, {parse_mode: 'Markdown'});
                
            } else {
                // THIS IS THE KEY - No translation found anywhere, ask for AUTHENTIC TULU
                const taughtStats = await getTaughtDictionaryStats();
                const cacheStats = await getAPICacheStats();
                
                const learnMessage = `üèõÔ∏è **"${userText}" - Need Authentic Tulu!**

üîç **Complete Search Strategy Executed:**
‚úÖ ${Object.keys(tuluDictionary).length} base dictionary words (<1ms)
‚úÖ ${taughtStats.count} taught dictionary words (<5ms cached)
‚úÖ ${cacheStats.count} cached API translations (<50ms)
‚úÖ Google Translate API with Tulu code (tcy) - **No result found**

**üîë This is PERFECT for building authentic Tulu database!**

üéØ **Teach Authentic Tulu:**
Reply with the correct **authentic Tulu** translation (Roman letters)

**Why this approach works:**
üèõÔ∏è **APIs don't have good Tulu** - That's why it failed
üåç **You provide authentic word** - Real Tulu from native speaker
üìö **Everyone benefits** - Your word helps all users globally
ü•á **Tier 2 priority** - Always beats any future API attempts
üíæ **Smart caching** - 5-minute cache for blazing-fast lookup
üìà **Database growth** - Each word makes the system more authentic

**Examples of authentic Tulu contributions:**
‚Ä¢ "I miss you" ‚Üí "[translate:yaan ninna miss madtini]"
‚Ä¢ "How's everything?" ‚Üí "[translate:yelaa ide?]"
‚Ä¢ "Take care" ‚Üí "[translate:jagrathegiri]"

‚è∞ **Teaching request expires in 10 minutes**
üîß **Commands:** **/skip** to cancel

üèõÔ∏è **This is exactly how we preserve authentic Tulu - API fails, you teach!**`;

                await bot.sendMessage(msg.chat.id, learnMessage, {parse_mode: 'Markdown'});
                
                // Auto-expire learning request
                setTimeout(() => {
                    if (userStates[userId] && userStates[userId].englishWord === userText.toLowerCase()) {
                        delete userStates[userId];
                        bot.sendMessage(msg.chat.id, `‚è∞ **Teaching request expired for "${userText}"**

üîÑ **Ready for new authentic translations!**
üí° **Try different words** or browse **/learned** to see authentic contributions`).catch(() => {});
                    }
                }, 10 * 60 * 1000);
            }
        } else {
            const taughtStats = await getTaughtDictionaryStats();
            const totalWords = Object.keys(tuluDictionary).length + taughtStats.count;
            
            await bot.sendMessage(msg.chat.id, `‚ùå **Please send English text only**

‚úÖ **Supported formats:**
‚Ä¢ English words and phrases
‚Ä¢ Numbers (handled by base dictionary with <1ms lookup)
‚Ä¢ Simple punctuation

üìä **Authentic Tulu Strategy:**
‚Ä¢ ${totalWords}+ words across optimized collections
‚Ä¢ Google Translate API (tcy) ‚Üí User teaching for authentic Tulu
‚Ä¢ Smart caching with reduced timeouts
‚Ä¢ Community-driven authentic preservation

üéØ **Goal:** English ‚Üí **Authentic Tulu** (Roman letters) 
üí° **Try:** "hello" (<1ms), "thank you" (<1ms), "I love you" (teach authentic!)

üèõÔ∏è **Building the most authentic Tulu database with optimal performance!**`);
        }
    }
});

// Add all other bot commands (stats, learned, correct, skip, numbers) here...
// [Previous command implementations remain the same]

// Error handling
bot.on('error', (error) => {
    console.error('üö® Bot error:', error);
});

bot.on('polling_error', (error) => {
    console.error('üö® Polling error:', error);
});

// Graceful shutdown
process.on('SIGTERM', async () => {
    console.log('üì¥ Graceful shutdown initiated...');
    if (client && mongoAvailable) {
        await client.close();
        console.log('üóÑÔ∏è Optimized MongoDB connection closed');
    }
    bot.stopPolling();
    process.exit(0);
});

// Start health server
app.listen(PORT, () => {
    console.log(`üåê Performance-optimized health server running on port ${PORT}`);
});

// Enhanced startup sequence
async function startBot() {
    try {
        console.log('üîß Initializing performance-optimized MongoDB collections...');
        mongoAvailable = await initializeMongoDB();
        
        if (mongoAvailable) {
            console.log('üìö Loading taught dictionary into smart cache...');
            learnedWords = await getCachedTaughtWords();
        } else {
            console.log('‚ö° Running with optimized memory storage + Tulu API fallback');
        }
        
        console.log('ü§ñ Starting optimized bot with conflict prevention...');
        await startBotSafely();
        
        const taughtStats = await getTaughtDictionaryStats();
        const cacheStats = await getAPICacheStats();
        
        console.log('‚úÖ ========================================================');
        console.log('‚úÖ AUTHENTIC TULU TRANSLATOR WITH PERFORMANCE OPTIMIZATION');
        console.log('‚úÖ ========================================================\n');
        
        console.log(`ü§ñ Bot: @${(await bot.getMe()).username}`);
        console.log(`üóÑÔ∏è Database: ${mongoAvailable ? 'Optimized MongoDB Collections (5-15s timeouts)' : 'Memory + Tulu API'}`);
        console.log(`‚ö° Wake-on-Start: Active (No delays)`);
        console.log(`üèì Keep-Alive: Enhanced 45-minute sessions`);
        console.log(`üìö Base Dictionary: ${Object.keys(tuluDictionary).length} verified words (<1ms)`);
        console.log(`üéØ Taught Dictionary: ${taughtStats.count} authentic contributions (<5ms)`);
        console.log(`üíæ API Cache: ${cacheStats.count} cached translations (<50ms)`);
        console.log(`üåç Total Vocabulary: ${Object.keys(tuluDictionary).length + taughtStats.count}+ words`);
        console.log(`üåê API Strategy: Google Translate (tcy) ‚Üí User Teaching for Authentic Tulu`);
        console.log(`üîß Collections: taught_dictionary + api_cache with smart caching`);
        console.log(`üë• User Attribution: Full credit system with performance tracking`);
        console.log(`üèõÔ∏è Authenticity Focus: Real Tulu preservation through community`);
        console.log(`üìä Analytics: Optimized usage tracking and statistics`);
        console.log(`üöÄ Performance: Smart caching, reduced timeouts, optimized polling`);
        console.log('');
        console.log('üèõÔ∏è Ready for authentic Tulu preservation with maximum performance!');
        console.log('üéØ API fails ‚Üí User teaches ‚Üí Everyone benefits with authentic Tulu!');
        
    } catch (error) {
        console.error('‚ùå Authentic Tulu bot startup failed:', error);
        process.exit(1);
    }
}

// Start the complete authentic Tulu bot with performance optimization
startBot();
